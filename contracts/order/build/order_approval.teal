#pragma version 10
//tealish version git+https://github.com/tinymanorg/tealish.git@d7441973671cf6b79dd55843016892f4b86ceeba

// Tinyman Order Protocol
// License: https://github.com/tinymanorg/tinyman-order-protocol/blob/main/LICENSE
// Documentation: https://docs.tinyman.org


// Name: o<id>


// Name: r<id>


// Global State

#define REGISTRY_APP_ID_KEY "registry_app_id"
#define REGISTRY_APP_ACCOUNT_ADDRESS_KEY "registry_app_account_address"
#define VAULT_APP_ID_KEY "vault_app_id"

#define USER_ADDRESS_KEY "user_address"
#define TOTAL_ORDER_COUNT_KEY "order_count"

#define PROPOSED_MANAGER_KEY "proposed_manager"
#define MANAGER_KEY "manager"

#define ORDER_FEE_RATE_KEY "order_fee_rate"

// Global State External

#define ORDER_FEE_RATE_KEY "order_fee_rate"
#define GOVERNOR_ORDER_FEE_RATE_KEY "governor_order_fee_rate"
#define GOVERNOR_FEE_RATE_POWER_THRESHOLD "governor_fee_rate_power_threshold"

// Local State External

#define IS_ENDORSED_KEY "is_endorsed"

// Math Constants

#define RATE_SCALER 18446744073709551615
#define MAX_UINT64 18446744073709551615
#define MINUTE 60
#define INTERVAL_TOLERANCE 30


// tl:75: router:
pushbytes "create_application"
pushbytes "update_application"
pushbytes "init"
pushbytes "propose_manager"
pushbytes "accept_manager"
pushbytes "asset_opt_in"
pushbytes "put_order"
pushbytes "cancel_order"
pushbytes "start_execute_order"
pushbytes "end_execute_order"
pushbytes "put_recurring_order"
pushbytes "cancel_recurring_order"
pushbytes "start_execute_recurring_order"
pushbytes "end_execute_recurring_order"
pushbytes "collect"
txna ApplicationArgs 0
match route_create_application route_update_application route_init route_propose_manager route_accept_manager route_asset_opt_in route_put_order route_cancel_order route_start_execute_order route_end_execute_order route_put_recurring_order route_cancel_recurring_order route_start_execute_recurring_order route_end_execute_recurring_order route_collect
err                                                         // unexpected value
route_create_application:
    txn ApplicationID; pushint 0; ==; assert                // ApplicationID == 0
    txna ApplicationArgs 1; btoi 
    txna ApplicationArgs 2; btoi 
    txna ApplicationArgs 3; dup; len; pushint 32; ==; assert// Bytes Size Assertion: 32 bytes
    callsub __func__create_application
    pushint 1; return
route_update_application:
    txn OnCompletion; pushint 4; ==; assert                 // assert OnCompletion == UpdateApplication
    callsub __func__update_application
    pushint 1; return
route_init:
    txn OnCompletion; pushint 0; ==; assert                 // assert OnCompletion == NoOp
    callsub __func__init
    pushint 1; return
route_propose_manager:
    txn OnCompletion; pushint 0; ==; assert                 // assert OnCompletion == NoOp
    txna ApplicationArgs 1; dup; len; pushint 32; ==; assert// Bytes Size Assertion: 32 bytes
    callsub __func__propose_manager
    pushint 1; return
route_accept_manager:
    txn OnCompletion; pushint 0; ==; assert                 // assert OnCompletion == NoOp
    callsub __func__accept_manager
    pushint 1; return
route_asset_opt_in:
    txn OnCompletion; pushint 0; ==; assert                 // assert OnCompletion == NoOp
    txna ApplicationArgs 1; dup; len; pushint 64; ==; assert// Bytes Size Assertion: 64 bytes
    callsub __func__asset_opt_in
    pushint 1; return
route_put_order:
    txn OnCompletion; pushint 0; ==; assert                 // assert OnCompletion == NoOp
    txna ApplicationArgs 1; btoi 
    txna ApplicationArgs 2; btoi 
    txna ApplicationArgs 3; btoi 
    txna ApplicationArgs 4; btoi 
    txna ApplicationArgs 5; btoi 
    txna ApplicationArgs 6; btoi 
    callsub __func__put_order
    pushint 1; return
route_cancel_order:
    txn OnCompletion; pushint 0; ==; assert                 // assert OnCompletion == NoOp
    txna ApplicationArgs 1; btoi 
    callsub __func__cancel_order
    pushint 1; return
route_start_execute_order:
    txn OnCompletion; pushint 0; ==; assert                 // assert OnCompletion == NoOp
    txna ApplicationArgs 1; btoi 
    txna ApplicationArgs 2; btoi 
    txna ApplicationArgs 3; btoi 
    callsub __func__start_execute_order
    pushint 1; return
route_end_execute_order:
    txn OnCompletion; pushint 0; ==; assert                 // assert OnCompletion == NoOp
    txna ApplicationArgs 1; btoi 
    txna ApplicationArgs 2; btoi 
    txna ApplicationArgs 3; btoi 
    callsub __func__end_execute_order
    pushint 1; return
route_put_recurring_order:
    txn OnCompletion; pushint 0; ==; assert                 // assert OnCompletion == NoOp
    txna ApplicationArgs 1; btoi 
    txna ApplicationArgs 2; btoi 
    txna ApplicationArgs 3; btoi 
    txna ApplicationArgs 4; btoi 
    txna ApplicationArgs 5; btoi 
    txna ApplicationArgs 6; btoi 
    txna ApplicationArgs 7; btoi 
    callsub __func__put_recurring_order
    pushint 1; return
route_cancel_recurring_order:
    txn OnCompletion; pushint 0; ==; assert                 // assert OnCompletion == NoOp
    txna ApplicationArgs 1; btoi 
    callsub __func__cancel_recurring_order
    pushint 1; return
route_start_execute_recurring_order:
    txn OnCompletion; pushint 0; ==; assert                 // assert OnCompletion == NoOp
    txna ApplicationArgs 1; btoi 
    txna ApplicationArgs 2; btoi 
    txna ApplicationArgs 3; btoi 
    callsub __func__start_execute_recurring_order
    pushint 1; return
route_end_execute_recurring_order:
    txn OnCompletion; pushint 0; ==; assert                 // assert OnCompletion == NoOp
    txna ApplicationArgs 1; btoi 
    txna ApplicationArgs 2; btoi 
    txna ApplicationArgs 3; btoi 
    callsub __func__end_execute_recurring_order
    pushint 1; return
route_collect:
    txn OnCompletion; pushint 0; ==; assert                 // assert OnCompletion == NoOp
    txna ApplicationArgs 1; btoi 
    callsub __func__collect
    pushint 1; return


// Permission: anyone
// tl:96: func create_application(registry_app_id: int, vault_app_id: int, manager_address: bytes[32]):
__func__create_application:
    store 1                                                 // manager_address [bytes[32]]
    store 2                                                 // vault_app_id [int]
    store 3                                                 // registry_app_id [int]
    // tl:97: app_global_put(USER_ADDRESS_KEY, Txn.Sender)
    pushbytes USER_ADDRESS_KEY                              // "user_address"
    txn Sender
    app_global_put
    // tl:98: app_global_put(MANAGER_KEY, manager_address)
    pushbytes MANAGER_KEY                                   // "manager"
    load 1                                                  // manager_address
    app_global_put
    
    // tl:100: app_global_put(REGISTRY_APP_ID_KEY, registry_app_id)
    pushbytes REGISTRY_APP_ID_KEY                           // "registry_app_id"
    load 3                                                  // registry_app_id
    app_global_put
    // tl:101: bytes registry_app_account_address [slot 4]
    // tl:102: _, registry_app_account_address = app_params_get(AppAddress, registry_app_id)
    load 3                                                  // registry_app_id
    app_params_get AppAddress
    pop                                                     // discarding value for _
    store 4                                                 // registry_app_account_address
    // tl:103: app_global_put(REGISTRY_APP_ACCOUNT_ADDRESS_KEY, registry_app_account_address)
    pushbytes REGISTRY_APP_ACCOUNT_ADDRESS_KEY              // "registry_app_account_address"
    load 4                                                  // registry_app_account_address
    app_global_put
    // tl:104: app_global_put(VAULT_APP_ID_KEY, vault_app_id)
    pushbytes VAULT_APP_ID_KEY                              // "vault_app_id"
    load 2                                                  // vault_app_id
    app_global_put
    
    // create_application(user_address,registry_app_id,vault_app_id,manager_address)
    // tl:107: log(ARC28Event("create_application(address,uint64,uint64,address)", Txn.Sender, itob(registry_app_id), itob(vault_app_id), manager_address))
    pushbytes 0x9cf7b48c                                    // SHA512_256("create_application(address,uint64,uint64,address)")[:4]
    txn Sender
    load 3                                                  // registry_app_id
    itob
    load 2                                                  // vault_app_id
    itob
    load 1                                                  // manager_address
    concat
    concat
    concat
    concat
    log
    // tl:108: return
    retsub


// TODO: Remove function for mainnet
// tl:114: func update_application():
__func__update_application:
    // tl:115: assert(Txn.Sender == app_global_get("manager"))
    txn Sender
    pushbytes "manager"
    app_global_get
    ==
    assert
    // tl:116: return
    retsub


// Permission: manager
// tl:122: func init():
__func__init:
    // tl:123: assert(Txn.Sender == app_global_get(MANAGER_KEY))
    txn Sender
    pushbytes MANAGER_KEY                                   // "manager"
    app_global_get
    ==
    assert
    
    // tl:125: log(ARC28Event("init()"))
    pushbytes 0x8707a1db                                    // SHA512_256("init()")[:4]
    log
    // tl:126: return
    retsub


// permission: manager
// tl:132: func propose_manager(new_manager: bytes[32]):
__func__propose_manager:
    store 5                                                 // new_manager [bytes[32]]
    // tl:133: assert(Txn.Sender == app_global_get(MANAGER_KEY))
    txn Sender
    pushbytes MANAGER_KEY                                   // "manager"
    app_global_get
    ==
    assert
    
    // tl:135: app_global_put(PROPOSED_MANAGER_KEY, new_manager)
    pushbytes PROPOSED_MANAGER_KEY                          // "proposed_manager"
    load 5                                                  // new_manager
    app_global_put
    // tl:136: log(ARC28Event("propose_manager(address)", new_manager))
    pushbytes 0x9f8a67ff                                    // SHA512_256("propose_manager(address)")[:4]
    load 5                                                  // new_manager
    concat
    log
    // tl:137: return
    retsub


// The proposed manager must call this function to become the manager.
// permission: proposed_manager
// tl:144: func accept_manager():
__func__accept_manager:
    // tl:145: bytes proposed_manager = app_global_get(PROPOSED_MANAGER_KEY) [slot 6]
    pushbytes PROPOSED_MANAGER_KEY                          // "proposed_manager"
    app_global_get
    store 6                                                 // proposed_manager
    // tl:146: assert(Txn.Sender == proposed_manager)
    txn Sender
    load 6                                                  // proposed_manager
    ==
    assert
    
    // tl:148: app_global_put(MANAGER_KEY, proposed_manager)
    pushbytes MANAGER_KEY                                   // "manager"
    load 6                                                  // proposed_manager
    app_global_put
    // tl:149: app_global_put(PROPOSED_MANAGER_KEY, "")
    pushbytes PROPOSED_MANAGER_KEY                          // "proposed_manager"
    pushbytes ""
    app_global_put
    // tl:150: log(ARC28Event("accept_manager(address)", proposed_manager))
    pushbytes 0xbb6affe3                                    // SHA512_256("accept_manager(address)")[:4]
    load 6                                                  // proposed_manager
    concat
    log
    // tl:151: return
    retsub


// tl:156: func asset_opt_in(asset_ids: int[8]):
__func__asset_opt_in:
    store 7                                                 // asset_ids [int[8]]
    // tl:157: bytes user_address = app_global_get(USER_ADDRESS_KEY) [slot 8]
    pushbytes USER_ADDRESS_KEY                              // "user_address"
    app_global_get
    store 8                                                 // user_address
    // tl:158: assert(Txn.Sender == user_address)
    txn Sender
    load 8                                                  // user_address
    ==
    assert
    
    // Required Algo to cover minimum balance increase must be supplied.
    // It is not checked explicitly.
    // Using extra balance is allowed.
    // tl:163: for i in 0:8:
        pushint 0
        store 9                                             // i
        l0_for:
        load 9                                              // i
        pushint 8
        ==
        bnz l0_end
        // tl:164: opt_in_to_asset_if_needed(asset_ids[i])
        load 7                                              // asset_ids
        pushint 8
        load 9                                              // i
        *
        pushint 8
        extract
        btoi
        callsub __func__opt_in_to_asset_if_needed
        load 9                                              // i
        pushint 1
        +
        store 9                                             // i
        b l0_for
        l0_end:
    // tl:166: return
    retsub


// Description: Create an order with the monotonically incremented ORDER_COUNT as id.
// Prerequisites: App should be opted into both `asset_id` and `target_asset_id`. Only `target_asset_id` optin checked explicitly.
// Permission: App owner (User)
// tl:174: func put_order(asset_id: int, amount: int, target_asset_id: int, target_amount: int, is_partial_allowed: int, duration: int):
__func__put_order:
    store 10                                                // duration [int]
    store 11                                                // is_partial_allowed [int]
    store 12                                                // target_amount [int]
    store 13                                                // target_asset_id [int]
    store 14                                                // amount [int]
    store 15                                                // asset_id [int]
    // tl:175: bytes user_address = app_global_get(USER_ADDRESS_KEY) [slot 16]
    pushbytes USER_ADDRESS_KEY                              // "user_address"
    app_global_get
    store 16                                                // user_address
    // tl:176: assert(Txn.Sender == user_address)
    txn Sender
    load 16                                                 // user_address
    ==
    assert
    
    // tl:178: int total_order_count = app_global_get(TOTAL_ORDER_COUNT_KEY) [slot 17]
    pushbytes TOTAL_ORDER_COUNT_KEY                         // "order_count"
    app_global_get
    store 17                                                // total_order_count
    // tl:179: box<Order> order = CreateBox(Concat("o", itob(total_order_count))) [slot 18]
    pushbytes "o"
    load 17                                                 // total_order_count
    itob
    concat
    dup; pushint 80; box_create; assert                     // create & assert created
    store 18                                                // box:order
    
    // Assertions
    // tl:182: assert(amount > 0)
    load 14                                                 // amount
    pushint 0
    >
    assert
    // tl:183: assert(target_amount > 0)
    load 12                                                 // target_amount
    pushint 0
    >
    assert
    // tl:184: assert(asset_id != target_asset_id)
    load 15                                                 // asset_id
    load 13                                                 // target_asset_id
    !=
    assert
    
    // tl:186: int expiration_timestamp [slot 19]
    // tl:187: if !duration:
    load 10                                                 // duration
    !
    bz l1_else
    // then:
        // tl:188: expiration_timestamp = MAX_UINT64
        pushint MAX_UINT64                                  // 18446744073709551615
        store 19                                            // expiration_timestamp
        b l1_end
    l1_else:
    // tl:189: else:
        // tl:190: expiration_timestamp = Global.LatestTimestamp + duration
        global LatestTimestamp
        load 10                                             // duration
        +
        store 19                                            // expiration_timestamp
    l1_end:
    
    // tl:193: if target_asset_id:
    load 13                                                 // target_asset_id
    bz l2_end
    // then:
        // tl:194: int is_opted_in_to_target [slot 20]
        // tl:195: is_opted_in_to_target, _ = asset_holding_get(AssetBalance, Global.CurrentApplicationAddress, target_asset_id)
        global CurrentApplicationAddress
        load 13                                             // target_asset_id
        asset_holding_get AssetBalance
        store 20                                            // is_opted_in_to_target
        pop                                                 // discarding value for _
        // tl:196: assert(is_opted_in_to_target)
        load 20                                             // is_opted_in_to_target
        assert
    l2_end:
    
    // tl:199: check_received_asset(Txn.GroupIndex - 1, Global.CurrentApplicationAddress, asset_id, amount)
    txn GroupIndex
    pushint 1
    -
    global CurrentApplicationAddress
    load 15                                                 // asset_id
    load 14                                                 // amount
    callsub __func__check_received_asset
    
    // tl:201: int fee_rate = get_fee_rate() [slot 21]
    callsub __func__get_fee_rate
    store 21                                                // fee_rate
    
    // tl:203: order.asset_id = asset_id
    load 15                                                 // asset_id
    itob
    load 18
    pushint 0
    uncover 2
    box_replace
    // boxset order.asset_id
    // tl:204: order.amount = amount
    load 14                                                 // amount
    itob
    load 18
    pushint 8
    uncover 2
    box_replace
    // boxset order.amount
    // tl:205: order.target_asset_id = target_asset_id
    load 13                                                 // target_asset_id
    itob
    load 18
    pushint 16
    uncover 2
    box_replace
    // boxset order.target_asset_id
    // tl:206: order.target_amount = target_amount
    load 12                                                 // target_amount
    itob
    load 18
    pushint 24
    uncover 2
    box_replace
    // boxset order.target_amount
    // tl:207: order.filled_amount = 0
    pushint 0
    itob
    load 18
    pushint 32
    uncover 2
    box_replace
    // boxset order.filled_amount
    // tl:208: order.collected_target_amount = 0
    pushint 0
    itob
    load 18
    pushint 40
    uncover 2
    box_replace
    // boxset order.collected_target_amount
    // tl:209: order.is_partial_allowed = is_partial_allowed
    load 11                                                 // is_partial_allowed
    itob
    load 18
    pushint 48
    uncover 2
    box_replace
    // boxset order.is_partial_allowed
    // tl:210: order.fee_rate = fee_rate
    load 21                                                 // fee_rate
    itob
    load 18
    pushint 56
    uncover 2
    box_replace
    // boxset order.fee_rate
    // tl:211: order.creation_timestamp = Global.LatestTimestamp
    global LatestTimestamp
    itob
    load 18
    pushint 64
    uncover 2
    box_replace
    // boxset order.creation_timestamp
    // tl:212: order.expiration_timestamp = expiration_timestamp
    load 19                                                 // expiration_timestamp
    itob
    load 18
    pushint 72
    uncover 2
    box_replace
    // boxset order.expiration_timestamp
    
    // tl:214: app_global_put(TOTAL_ORDER_COUNT_KEY, total_order_count + 1)
    pushbytes TOTAL_ORDER_COUNT_KEY                         // "order_count"
    load 17                                                 // total_order_count
    pushint 1
    +
    app_global_put
    
    // Logs
    // tl:217: bytes order_data [slot 22]
    // tl:218: _, order_data = box_get(order)
    load 18                                                 // order
    box_get
    pop                                                     // discarding value for _
    store 22                                                // order_data
    // tl:219: log(ARC28Event("order(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)", user_address, itob(total_order_count), order_data))
    pushbytes 0xc953e07a                                    // SHA512_256("order(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)")[:4]
    load 16                                                 // user_address
    load 17                                                 // total_order_count
    itob
    load 22                                                 // order_data
    concat
    concat
    concat
    log
    // tl:220: log(ARC28Event("put_order(uint64)", itob(total_order_count)))
    pushbytes 0x1a736da3                                    // SHA512_256("put_order(uint64)")[:4]
    load 17                                                 // total_order_count
    itob
    concat
    log
    
    // tl:222: return
    retsub


// Description: Send the `amount` or `amount - filled_amount` if partially filled to the user. Delete the order box.
// Prerequisites: If partial filling is utilized, collect method must be called before.
// Permission: App owner (User)
// tl:230: func cancel_order(order_id: int):
__func__cancel_order:
    store 23                                                // order_id [int]
    // tl:231: bytes user_address = app_global_get(USER_ADDRESS_KEY) [slot 24]
    pushbytes USER_ADDRESS_KEY                              // "user_address"
    app_global_get
    store 24                                                // user_address
    // tl:232: assert(Txn.Sender == user_address)
    txn Sender
    load 24                                                 // user_address
    ==
    assert
    
    // tl:234: box<Order> order = OpenBox(Concat("o", itob(order_id))) [slot 25]
    pushbytes "o"
    load 23                                                 // order_id
    itob
    concat
    dup; box_len; assert; pushint 80; ==; assert            // len(box) == Order.size
    store 25                                                // box:order
    
    // It is assumed that the order is deleted once it is executed.
    // Send remaining amount back to user.
    
    // tl:239: int remaining_amount = order.amount [slot 26]
    load 25; pushint 8; pushint 8; box_extract; btoi// order.amount
    store 26                                                // remaining_amount
    // tl:240: if order.is_partial_allowed:
    load 25; pushint 48; pushint 8; box_extract; btoi// order.is_partial_allowed
    bz l3_end
    // then:
        // tl:241: remaining_amount = remaining_amount - order.filled_amount
        load 26                                             // remaining_amount
        load 25; pushint 32; pushint 8; box_extract; btoi// order.filled_amount
        -
        store 26                                            // remaining_amount
    l3_end:
    
    // tl:244: assert(!order.collected_target_amount)
    load 25; pushint 40; pushint 8; box_extract; btoi// order.collected_target_amount
    !
    assert
    
    // tl:246: transfer(order.asset_id, remaining_amount, Global.CurrentApplicationAddress, user_address)
    load 25; pushint 0; pushint 8; box_extract; btoi// order.asset_id
    load 26                                                 // remaining_amount
    global CurrentApplicationAddress
    load 24                                                 // user_address
    callsub __func__transfer
    
    // Logs
    // tl:249: bytes order_data [slot 27]
    // tl:250: _, order_data = box_get(order)
    load 25                                                 // order
    box_get
    pop                                                     // discarding value for _
    store 27                                                // order_data
    // tl:251: log(ARC28Event("order(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)", user_address, itob(order_id), order_data))
    pushbytes 0xc953e07a                                    // SHA512_256("order(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)")[:4]
    load 24                                                 // user_address
    load 23                                                 // order_id
    itob
    load 27                                                 // order_data
    concat
    concat
    concat
    log
    // tl:252: log(ARC28Event("cancel_order(uint64)", itob(order_id)))
    pushbytes 0xc69098a6                                    // SHA512_256("cancel_order(uint64)")[:4]
    load 23                                                 // order_id
    itob
    concat
    log
    
    // Delete the box.
    // tl:255: _ = box_del(order)
    load 25                                                 // order
    box_del
    pop                                                     // discarding value for _
    
    // tl:257: return
    retsub


// tl:261: func check_execute_order_txn(txn_index: int, method_name: bytes, order_id: int, fill_amount: int, index_diff: int):
__func__check_execute_order_txn:
    store 28                                                // index_diff [int]
    store 29                                                // fill_amount [int]
    store 30                                                // order_id [int]
    store 31                                                // method_name [bytes]
    store 32                                                // txn_index [int]
    // tl:262: assert(Gtxn[txn_index].Sender == Txn.Sender)
    load 32                                                 // txn_index
    gtxns Sender
    txn Sender
    ==
    assert
    // tl:263: assert(Gtxn[txn_index].TypeEnum == Appl)
    load 32                                                 // txn_index
    gtxns TypeEnum
    pushint 6                                               // Appl
    ==
    assert
    // tl:264: assert(Gtxn[txn_index].OnCompletion == NoOp)
    load 32                                                 // txn_index
    gtxns OnCompletion
    pushint 0                                               // NoOp
    ==
    assert
    // tl:265: assert(Gtxn[txn_index].ApplicationID == Global.CurrentApplicationID)
    load 32                                                 // txn_index
    gtxns ApplicationID
    global CurrentApplicationID
    ==
    assert
    // tl:266: assert(Gtxn[txn_index].ApplicationArgs[0] == method_name)
    load 32                                                 // txn_index
    gtxnsa ApplicationArgs 0
    load 31                                                 // method_name
    ==
    assert
    // tl:267: assert(Gtxn[txn_index].ApplicationArgs[1] == itob(order_id))
    load 32                                                 // txn_index
    gtxnsa ApplicationArgs 1
    load 30                                                 // order_id
    itob
    ==
    assert
    // tl:268: assert(Gtxn[txn_index].ApplicationArgs[2] == itob(fill_amount))
    load 32                                                 // txn_index
    gtxnsa ApplicationArgs 2
    load 29                                                 // fill_amount
    itob
    ==
    assert
    // tl:269: assert(Gtxn[txn_index].ApplicationArgs[3] == itob(index_diff))
    load 32                                                 // txn_index
    gtxnsa ApplicationArgs 3
    load 28                                                 // index_diff
    itob
    ==
    assert
    // tl:270: return
    retsub


// Description: Method allows an executor (taker) to do arbitrary operations between `Txn.GroupIndex < i < (Txn.GroupIndex + index_diff)`.
// An executor must call `end_execute_order` at the `Txn.GroupIndex + index_diff` for the transaction group to succeed.
// Permission: Everyone
// tl:278: func start_execute_order(order_id: int, fill_amount: int, index_diff: int):
__func__start_execute_order:
    store 33                                                // index_diff [int]
    store 34                                                // fill_amount [int]
    store 35                                                // order_id [int]
    // tl:279: box<Order> order = OpenBox(Concat("o", itob(order_id))) [slot 36]
    pushbytes "o"
    load 35                                                 // order_id
    itob
    concat
    dup; box_len; assert; pushint 80; ==; assert            // len(box) == Order.size
    store 36                                                // box:order
    
    // Assertions
    // tl:282: assert(index_diff >= 2)
    load 33                                                 // index_diff
    pushint 2
    >=
    assert
    
    // If partial filling is not allowed, executor should fill the whole order at once. Otherwise smaller amounts are allowed.
    // tl:285: int remaining_amount = order.amount [slot 37]
    load 36; pushint 8; pushint 8; box_extract; btoi// order.amount
    store 37                                                // remaining_amount
    // tl:286: if order.is_partial_allowed:
    load 36; pushint 48; pushint 8; box_extract; btoi// order.is_partial_allowed
    bz l4_else
    // then:
        // tl:287: remaining_amount = remaining_amount - order.filled_amount
        load 37                                             // remaining_amount
        load 36; pushint 32; pushint 8; box_extract; btoi// order.filled_amount
        -
        store 37                                            // remaining_amount
        // tl:288: assert(fill_amount <= remaining_amount)
        load 34                                             // fill_amount
        load 37                                             // remaining_amount
        <=
        assert
        b l4_end
    l4_else:
    // tl:289: else:
        // tl:290: assert(fill_amount == remaining_amount)
        load 34                                             // fill_amount
        load 37                                             // remaining_amount
        ==
        assert
    l4_end:
    
    // tl:293: assert(Global.LatestTimestamp <= order.expiration_timestamp)
    global LatestTimestamp
    load 36; pushint 72; pushint 8; box_extract; btoi// order.expiration_timestamp
    <=
    assert
    
    // tl:295: int end_execute_order_txn_index = Txn.GroupIndex + index_diff [slot 38]
    txn GroupIndex
    load 33                                                 // index_diff
    +
    store 38                                                // end_execute_order_txn_index
    // tl:296: check_execute_order_txn(end_execute_order_txn_index, "end_execute_order", order_id, fill_amount, index_diff)
    load 38                                                 // end_execute_order_txn_index
    pushbytes "end_execute_order"
    load 35                                                 // order_id
    load 34                                                 // fill_amount
    load 33                                                 // index_diff
    callsub __func__check_execute_order_txn
    
    // Transfer `fill_amount` to executor.
    // tl:299: transfer(order.asset_id, fill_amount, Global.CurrentApplicationAddress, Txn.Sender)
    load 36; pushint 0; pushint 8; box_extract; btoi// order.asset_id
    load 34                                                 // fill_amount
    global CurrentApplicationAddress
    txn Sender
    callsub __func__transfer
    
    // Logs
    // tl:302: log(ARC28Event("start_execute_order(address,uint64,address)", app_global_get(USER_ADDRESS_KEY), itob(order_id), Txn.Sender))
    pushbytes 0x1740bc29                                    // SHA512_256("start_execute_order(address,uint64,address)")[:4]
    pushbytes USER_ADDRESS_KEY                              // "user_address"
    app_global_get
    load 35                                                 // order_id
    itob
    txn Sender
    concat
    concat
    concat
    log
    
    // tl:304: return
    retsub


// Description: Method checks the validity of the execution between `start_execute_order` and `end_execute_order`.
// An executor must return the correct amount of `target_asset_id` via an axfer at `Txn.GroupIndex - 1`. Otherwise the transaction group fails.
// Permission: Everyone
// tl:312: func end_execute_order(order_id: int, fill_amount: int, index_diff: int):
__func__end_execute_order:
    store 39                                                // index_diff [int]
    store 40                                                // fill_amount [int]
    store 41                                                // order_id [int]
    // tl:313: bytes user_address = app_global_get(USER_ADDRESS_KEY) [slot 42]
    pushbytes USER_ADDRESS_KEY                              // "user_address"
    app_global_get
    store 42                                                // user_address
    // tl:314: box<Order> order = OpenBox(Concat("o", itob(order_id))) [slot 43]
    pushbytes "o"
    load 41                                                 // order_id
    itob
    concat
    dup; box_len; assert; pushint 80; ==; assert            // len(box) == Order.size
    store 43                                                // box:order
    
    // tl:316: int start_execute_order_txn_index = Txn.GroupIndex - index_diff [slot 44]
    txn GroupIndex
    load 39                                                 // index_diff
    -
    store 44                                                // start_execute_order_txn_index
    // tl:317: check_execute_order_txn(start_execute_order_txn_index, "start_execute_order", order_id, fill_amount, index_diff)
    load 44                                                 // start_execute_order_txn_index
    pushbytes "start_execute_order"
    load 41                                                 // order_id
    load 40                                                 // fill_amount
    load 39                                                 // index_diff
    callsub __func__check_execute_order_txn
    
    // Assert that user received the target amount or more.
    // TODO: Review the calculations.
    // tl:321: int minimum_amount [slot 45]
    // tl:322: if !order.is_partial_allowed:
    load 43; pushint 48; pushint 8; box_extract; btoi// order.is_partial_allowed
    !
    bz l5_else
    // then:
        // tl:323: minimum_amount = order.target_amount
        load 43; pushint 24; pushint 8; box_extract; btoi// order.target_amount
        store 45                                            // minimum_amount
        b l5_end
    l5_else:
    // tl:324: else:
        // tl:325: minimum_amount = calculate_minimum_amount(order.amount, order.target_amount, fill_amount)
        load 43; pushint 8; pushint 8; box_extract; btoi// order.amount
        load 43; pushint 24; pushint 8; box_extract; btoi// order.target_amount
        load 40                                             // fill_amount
        callsub __func__calculate_minimum_amount
        store 45                                            // minimum_amount
    l5_end:
    
    // tl:328: int received_amount = check_received_target_asset(Txn.GroupIndex - 1, Global.CurrentApplicationAddress, order.target_asset_id, minimum_amount) [slot 46]
    txn GroupIndex
    pushint 1
    -
    global CurrentApplicationAddress
    load 43; pushint 16; pushint 8; box_extract; btoi// order.target_asset_id
    load 45                                                 // minimum_amount
    callsub __func__check_received_target_asset
    store 46                                                // received_amount
    
    // tl:330: order.filled_amount = order.filled_amount + fill_amount
    load 43; pushint 32; pushint 8; box_extract; btoi// order.filled_amount
    load 40                                                 // fill_amount
    +
    itob
    load 43
    pushint 32
    uncover 2
    box_replace
    // boxset order.filled_amount
    // tl:331: order.collected_target_amount = order.collected_target_amount + received_amount
    load 43; pushint 40; pushint 8; box_extract; btoi// order.collected_target_amount
    load 46                                                 // received_amount
    +
    itob
    load 43
    pushint 40
    uncover 2
    box_replace
    // boxset order.collected_target_amount
    
    // Logs
    // tl:334: bytes order_data [slot 47]
    // tl:335: _, order_data = box_get(order)
    load 43                                                 // order
    box_get
    pop                                                     // discarding value for _
    store 47                                                // order_data
    // tl:336: log(ARC28Event("order(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)", user_address, itob(order_id), order_data))
    pushbytes 0xc953e07a                                    // SHA512_256("order(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)")[:4]
    load 42                                                 // user_address
    load 41                                                 // order_id
    itob
    load 47                                                 // order_data
    concat
    concat
    concat
    log
    // tl:337: log(ARC28Event("end_execute_order(address,uint64,address,uint64,uint64)", app_global_get(USER_ADDRESS_KEY), itob(order_id), Txn.Sender, itob(fill_amount), itob(received_amount)))
    pushbytes 0x6cfd21b6                                    // SHA512_256("end_execute_order(address,uint64,address,uint64,uint64)")[:4]
    pushbytes USER_ADDRESS_KEY                              // "user_address"
    app_global_get
    load 41                                                 // order_id
    itob
    txn Sender
    load 40                                                 // fill_amount
    itob
    load 46                                                 // received_amount
    itob
    concat
    concat
    concat
    concat
    concat
    log
    
    // If all amount is filled, send the collected_target_amount to user, send the fee_amount to registry app, delete the order.
    // If partial filling is not allowed `collected_target_amount` >= `target_amount` == `received_amount`.
    // If partial filling is allowed, and user has collected partial fills beforehand, `collected_target_amount` < `target_amount`.
    // tl:342: if order.amount == order.filled_amount:
    load 43; pushint 8; pushint 8; box_extract; btoi// order.amount
    load 43; pushint 32; pushint 8; box_extract; btoi// order.filled_amount
    ==
    bz l6_end
    // then:
        // tl:343: int fee_amount = calculate_fee_amount(order.collected_target_amount, order.fee_rate) [slot 48]
        load 43; pushint 40; pushint 8; box_extract; btoi// order.collected_target_amount
        load 43; pushint 56; pushint 8; box_extract; btoi// order.fee_rate
        callsub __func__calculate_fee_amount
        store 48                                            // fee_amount
        
        // tl:345: transfer(order.target_asset_id, (order.collected_target_amount - fee_amount), Global.CurrentApplicationAddress, user_address)
        load 43; pushint 16; pushint 8; box_extract; btoi// order.target_asset_id
        load 43; pushint 40; pushint 8; box_extract; btoi// order.collected_target_amount
        load 48                                             // fee_amount
        -
        global CurrentApplicationAddress
        load 42                                             // user_address
        callsub __func__transfer
        // tl:346: transfer(order.target_asset_id, fee_amount, Global.CurrentApplicationAddress, app_global_get(REGISTRY_APP_ACCOUNT_ADDRESS_KEY))
        load 43; pushint 16; pushint 8; box_extract; btoi// order.target_asset_id
        load 48                                             // fee_amount
        global CurrentApplicationAddress
        pushbytes REGISTRY_APP_ACCOUNT_ADDRESS_KEY          // "registry_app_account_address"
        app_global_get
        callsub __func__transfer
        // tl:347: _ = box_del(order)
        load 43                                             // order
        box_del
        pop                                                 // discarding value for _
    l6_end:
    
    // tl:350: return
    retsub


// tl:355: func collect(order_id: int):
__func__collect:
    store 49                                                // order_id [int]
    // tl:356: bytes user_address = app_global_get(USER_ADDRESS_KEY) [slot 50]
    pushbytes USER_ADDRESS_KEY                              // "user_address"
    app_global_get
    store 50                                                // user_address
    // tl:357: assert(Txn.Sender == user_address)
    txn Sender
    load 50                                                 // user_address
    ==
    assert
    // tl:358: box<Order> order = OpenBox(Concat("o", itob(order_id))) [slot 51]
    pushbytes "o"
    load 49                                                 // order_id
    itob
    concat
    dup; box_len; assert; pushint 80; ==; assert            // len(box) == Order.size
    store 51                                                // box:order
    
    // tl:360: assert(order.collected_target_amount)
    load 51; pushint 40; pushint 8; box_extract; btoi// order.collected_target_amount
    assert
    
    // tl:362: int fee_amount = calculate_fee_amount(order.collected_target_amount, order.fee_rate) [slot 52]
    load 51; pushint 40; pushint 8; box_extract; btoi// order.collected_target_amount
    load 51; pushint 56; pushint 8; box_extract; btoi// order.fee_rate
    callsub __func__calculate_fee_amount
    store 52                                                // fee_amount
    // tl:363: assert(fee_amount)
    load 52                                                 // fee_amount
    assert
    
    // tl:365: transfer(order.target_asset_id, (order.collected_target_amount - fee_amount), Global.CurrentApplicationAddress, user_address)
    load 51; pushint 16; pushint 8; box_extract; btoi// order.target_asset_id
    load 51; pushint 40; pushint 8; box_extract; btoi// order.collected_target_amount
    load 52                                                 // fee_amount
    -
    global CurrentApplicationAddress
    load 50                                                 // user_address
    callsub __func__transfer
    // tl:366: transfer(order.target_asset_id, fee_amount, Global.CurrentApplicationAddress, app_global_get(REGISTRY_APP_ACCOUNT_ADDRESS_KEY))
    load 51; pushint 16; pushint 8; box_extract; btoi// order.target_asset_id
    load 52                                                 // fee_amount
    global CurrentApplicationAddress
    pushbytes REGISTRY_APP_ACCOUNT_ADDRESS_KEY              // "registry_app_account_address"
    app_global_get
    callsub __func__transfer
    
    // tl:368: int collected_target_amount = order.collected_target_amount [slot 53]
    load 51; pushint 40; pushint 8; box_extract; btoi// order.collected_target_amount
    store 53                                                // collected_target_amount
    // tl:369: order.collected_target_amount = 0
    pushint 0
    itob
    load 51
    pushint 40
    uncover 2
    box_replace
    // boxset order.collected_target_amount
    
    // Logs
    // tl:372: bytes order_data [slot 54]
    // tl:373: _, order_data = box_get(order)
    load 51                                                 // order
    box_get
    pop                                                     // discarding value for _
    store 54                                                // order_data
    // tl:374: log(ARC28Event("order(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)", user_address, itob(order_id), order_data))
    pushbytes 0xc953e07a                                    // SHA512_256("order(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)")[:4]
    load 50                                                 // user_address
    load 49                                                 // order_id
    itob
    load 54                                                 // order_data
    concat
    concat
    concat
    log
    // tl:375: log(ARC28Event("collect(uint64,uint64)", itob(order_id), itob(collected_target_amount)))
    pushbytes 0x2a061e2b                                    // SHA512_256("collect(uint64,uint64)")[:4]
    load 49                                                 // order_id
    itob
    load 53                                                 // collected_target_amount
    itob
    concat
    concat
    log
    
    // tl:377: return
    retsub


// Description: Create a recurring order with the monotonically incremented ORDER_COUNT as id.
// Prerequisites: App should be opted into both `asset_id` and `target_asset_id`. Only `target_asset_id` optin checked explicitly.
// Permission: App owner (User)
// tl:385: func put_recurring_order(asset_id: int, amount: int, target_asset_id: int, target_recurrence: int, interval: int, start_timestamp: int, duration: int):
__func__put_recurring_order:
    store 55                                                // duration [int]
    store 56                                                // start_timestamp [int]
    store 57                                                // interval [int]
    store 58                                                // target_recurrence [int]
    store 59                                                // target_asset_id [int]
    store 60                                                // amount [int]
    store 61                                                // asset_id [int]
    // tl:386: bytes user_address = app_global_get(USER_ADDRESS_KEY) [slot 62]
    pushbytes USER_ADDRESS_KEY                              // "user_address"
    app_global_get
    store 62                                                // user_address
    // tl:387: assert(Txn.Sender == user_address)
    txn Sender
    load 62                                                 // user_address
    ==
    assert
    
    // tl:389: int total_order_count = app_global_get(TOTAL_ORDER_COUNT_KEY) [slot 63]
    pushbytes TOTAL_ORDER_COUNT_KEY                         // "order_count"
    app_global_get
    store 63                                                // total_order_count
    // tl:390: box<RecurringOrder> order = CreateBox(Concat("r", itob(total_order_count))) [slot 64]
    pushbytes "r"
    load 63                                                 // total_order_count
    itob
    concat
    dup; pushint 96; box_create; assert                     // create & assert created
    store 64                                                // box:order
    
    // Assertions
    // tl:393: assert(amount > 0)
    load 60                                                 // amount
    pushint 0
    >
    assert
    // tl:394: assert(asset_id != target_asset_id)
    load 61                                                 // asset_id
    load 59                                                 // target_asset_id
    !=
    assert
    // tl:395: assert(target_recurrence > 0)
    load 58                                                 // target_recurrence
    pushint 0
    >
    assert
    // tl:396: assert(interval > MINUTE)
    load 57                                                 // interval
    pushint MINUTE                                          // 60
    >
    assert
    // tl:397: assert(!(interval % MINUTE))
    load 57                                                 // interval
    pushint MINUTE                                          // 60
    %
    !
    assert
    
    // tl:399: if !start_timestamp:
    load 56                                                 // start_timestamp
    !
    bz l7_else
    // then:
        // tl:400: start_timestamp = Global.LatestTimestamp
        global LatestTimestamp
        store 56                                            // start_timestamp
        b l7_end
    l7_else:
    // tl:401: else:
        // tl:402: assert(start_timestamp > Global.LatestTimestamp)
        load 56                                             // start_timestamp
        global LatestTimestamp
        >
        assert
    l7_end:
    
    // tl:405: int expiration_timestamp [slot 65]
    // tl:406: if !duration:
    load 55                                                 // duration
    !
    bz l8_else
    // then:
        // tl:407: expiration_timestamp = MAX_UINT64
        pushint MAX_UINT64                                  // 18446744073709551615
        store 65                                            // expiration_timestamp
        b l8_end
    l8_else:
    // tl:408: else:
        // tl:409: expiration_timestamp = Global.LatestTimestamp + duration
        global LatestTimestamp
        load 55                                             // duration
        +
        store 65                                            // expiration_timestamp
    l8_end:
    
    // tl:412: assert(expiration_timestamp >= (start_timestamp + (target_recurrence * interval)))
    load 65                                                 // expiration_timestamp
    load 56                                                 // start_timestamp
    load 58                                                 // target_recurrence
    load 57                                                 // interval
    *
    +
    >=
    assert
    
    // tl:414: int is_opted_in_to_target [slot 66]
    // tl:415: is_opted_in_to_target, _ = asset_holding_get(AssetBalance, Global.CurrentApplicationAddress, target_asset_id)
    global CurrentApplicationAddress
    load 59                                                 // target_asset_id
    asset_holding_get AssetBalance
    store 66                                                // is_opted_in_to_target
    pop                                                     // discarding value for _
    // tl:416: assert(is_opted_in_to_target)
    load 66                                                 // is_opted_in_to_target
    assert
    
    // tl:418: check_received_asset(Txn.GroupIndex - 1, Global.CurrentApplicationAddress, asset_id, amount)
    txn GroupIndex
    pushint 1
    -
    global CurrentApplicationAddress
    load 61                                                 // asset_id
    load 60                                                 // amount
    callsub __func__check_received_asset
    
    // tl:420: int fee_rate = get_fee_rate() [slot 67]
    callsub __func__get_fee_rate
    store 67                                                // fee_rate
    
    // tl:422: order.asset_id = asset_id
    load 61                                                 // asset_id
    itob
    load 64
    pushint 0
    uncover 2
    box_replace
    // boxset order.asset_id
    // tl:423: order.amount = amount
    load 60                                                 // amount
    itob
    load 64
    pushint 8
    uncover 2
    box_replace
    // boxset order.amount
    // tl:424: order.target_asset_id = target_asset_id
    load 59                                                 // target_asset_id
    itob
    load 64
    pushint 16
    uncover 2
    box_replace
    // boxset order.target_asset_id
    // tl:425: order.collected_target_amount = 0
    pushint 0
    itob
    load 64
    pushint 32
    uncover 2
    box_replace
    // boxset order.collected_target_amount
    // tl:426: order.target_recurrence = target_recurrence
    load 58                                                 // target_recurrence
    itob
    load 64
    pushint 40
    uncover 2
    box_replace
    // boxset order.target_recurrence
    // tl:427: order.filled_recurrence = 0
    pushint 0
    itob
    load 64
    pushint 48
    uncover 2
    box_replace
    // boxset order.filled_recurrence
    // tl:428: order.interval = interval
    load 57                                                 // interval
    itob
    load 64
    pushint 56
    uncover 2
    box_replace
    // boxset order.interval
    // tl:429: order.fee_rate = fee_rate
    load 67                                                 // fee_rate
    itob
    load 64
    pushint 64
    uncover 2
    box_replace
    // boxset order.fee_rate
    // tl:430: order.start_timestamp = start_timestamp
    load 56                                                 // start_timestamp
    itob
    load 64
    pushint 72
    uncover 2
    box_replace
    // boxset order.start_timestamp
    // tl:431: order.creation_timestamp = Global.LatestTimestamp
    global LatestTimestamp
    itob
    load 64
    pushint 80
    uncover 2
    box_replace
    // boxset order.creation_timestamp
    // tl:432: order.expiration_timestamp = expiration_timestamp
    load 65                                                 // expiration_timestamp
    itob
    load 64
    pushint 88
    uncover 2
    box_replace
    // boxset order.expiration_timestamp
    
    // tl:434: app_global_put(TOTAL_ORDER_COUNT_KEY, total_order_count + 1)
    pushbytes TOTAL_ORDER_COUNT_KEY                         // "order_count"
    load 63                                                 // total_order_count
    pushint 1
    +
    app_global_put
    
    // Logs
    // tl:437: bytes order_data [slot 68]
    // tl:438: _, order_data = box_get(order)
    load 64                                                 // order
    box_get
    pop                                                     // discarding value for _
    store 68                                                // order_data
    // tl:439: log(ARC28Event("recurring_order(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)", user_address, itob(total_order_count), order_data))
    pushbytes 0x5e044159                                    // SHA512_256("recurring_order(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)")[:4]
    load 62                                                 // user_address
    load 63                                                 // total_order_count
    itob
    load 68                                                 // order_data
    concat
    concat
    concat
    log
    // tl:440: log(ARC28Event("put_recurring_order(uint64)", itob(total_order_count)))
    pushbytes 0x87e86a4b                                    // SHA512_256("put_recurring_order(uint64)")[:4]
    load 63                                                 // total_order_count
    itob
    concat
    log
    
    // tl:442: return
    retsub


// Description: Send the `amount` or `amount - filled_amount` if partially filled to the user. Delete the order box.
// Prerequisites: If partial filling is utilized, collect method must be called before.
// Permission: App owner (User)
// tl:450: func cancel_recurring_order(order_id: int):
__func__cancel_recurring_order:
    store 69                                                // order_id [int]
    // tl:451: bytes user_address = app_global_get(USER_ADDRESS_KEY) [slot 70]
    pushbytes USER_ADDRESS_KEY                              // "user_address"
    app_global_get
    store 70                                                // user_address
    // tl:452: assert(Txn.Sender == user_address)
    txn Sender
    load 70                                                 // user_address
    ==
    assert
    
    // tl:454: box<RecurringOrder> order = OpenBox(Concat("r", itob(order_id))) [slot 71]
    pushbytes "r"
    load 69                                                 // order_id
    itob
    concat
    dup; box_len; assert; pushint 96; ==; assert            // len(box) == RecurringOrder.size
    store 71                                                // box:order
    
    // It is assumed that the order is deleted once it is executed.
    // Send remaining amount back to user.
    
    // tl:459: int remaining_amount = order.amount - order.filled_amount [slot 72]
    load 71; pushint 8; pushint 8; box_extract; btoi// order.amount
    load 71; pushint 24; pushint 8; box_extract; btoi// order.filled_amount
    -
    store 72                                                // remaining_amount
    
    // tl:461: assert(!order.collected_target_amount)
    load 71; pushint 32; pushint 8; box_extract; btoi// order.collected_target_amount
    !
    assert
    
    // tl:463: transfer(order.asset_id, remaining_amount, Global.CurrentApplicationAddress, user_address)
    load 71; pushint 0; pushint 8; box_extract; btoi// order.asset_id
    load 72                                                 // remaining_amount
    global CurrentApplicationAddress
    load 70                                                 // user_address
    callsub __func__transfer
    
    // Logs
    // tl:466: bytes order_data [slot 73]
    // tl:467: _, order_data = box_get(order)
    load 71                                                 // order
    box_get
    pop                                                     // discarding value for _
    store 73                                                // order_data
    // tl:468: log(ARC28Event("recurring_order(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)", user_address, itob(order_id), order_data))
    pushbytes 0x5e044159                                    // SHA512_256("recurring_order(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)")[:4]
    load 70                                                 // user_address
    load 69                                                 // order_id
    itob
    load 73                                                 // order_data
    concat
    concat
    concat
    log
    // tl:469: log(ARC28Event("cancel_recurring_order(uint64)", itob(order_id)))
    pushbytes 0x3e7b0c66                                    // SHA512_256("cancel_recurring_order(uint64)")[:4]
    load 69                                                 // order_id
    itob
    concat
    log
    
    // Delete the box.
    // tl:472: _ = box_del(order)
    load 71                                                 // order
    box_del
    pop                                                     // discarding value for _
    
    // tl:474: return
    retsub


// Description: Method allows an executor (taker) to do arbitrary operations between `Txn.GroupIndex < i < (Txn.GroupIndex + index_diff)`.
// An executor must call `end_execute_recurring_order` at the `Txn.GroupIndex + index_diff` for the transaction group to succeed.
// Permission: Everyone
// tl:482: func start_execute_recurring_order(order_id: int, fill_amount: int, index_diff: int):
__func__start_execute_recurring_order:
    store 74                                                // index_diff [int]
    store 75                                                // fill_amount [int]
    store 76                                                // order_id [int]
    // tl:483: box<RecurringOrder> order = OpenBox(Concat("r", itob(order_id))) [slot 77]
    pushbytes "r"
    load 76                                                 // order_id
    itob
    concat
    dup; box_len; assert; pushint 96; ==; assert            // len(box) == RecurringOrder.size
    store 77                                                // box:order
    
    // Assertions
    // tl:486: assert(index_diff >= 2)
    load 74                                                 // index_diff
    pushint 2
    >=
    assert
    
    // tl:488: int remaining_recurrence = order.target_recurrence - order.filled_recurrence [slot 78]
    load 77; pushint 40; pushint 8; box_extract; btoi// order.target_recurrence
    load 77; pushint 48; pushint 8; box_extract; btoi// order.filled_recurrence
    -
    store 78                                                // remaining_recurrence
    // tl:489: assert(remaining_recurrence > 0)
    load 78                                                 // remaining_recurrence
    pushint 0
    >
    assert
    
    // Assert that Txn.Sender is permissioned to fill recurring orders.
    // tl:492: check_is_endorsed(Txn.Sender)
    txn Sender
    callsub __func__check_is_endorsed
    
    // tl:494: int recurrence_amount [slot 79]
    
    // If it is the last recurrence, all left needs to be filled.
    // tl:497: if remaining_recurrence == 1:
    load 78                                                 // remaining_recurrence
    pushint 1
    ==
    bz l9_else
    // then:
        // tl:498: recurrence_amount = order.amount - order.filled_amount
        load 77; pushint 8; pushint 8; box_extract; btoi// order.amount
        load 77; pushint 24; pushint 8; box_extract; btoi// order.filled_amount
        -
        store 79                                            // recurrence_amount
        b l9_end
    l9_else:
    // tl:499: else:
        // tl:500: recurrence_amount = order.amount / order.target_recurrence
        load 77; pushint 8; pushint 8; box_extract; btoi// order.amount
        load 77; pushint 40; pushint 8; box_extract; btoi// order.target_recurrence
        /
        store 79                                            // recurrence_amount
    l9_end:
    
    // tl:503: assert(fill_amount == recurrence_amount)
    load 75                                                 // fill_amount
    load 79                                                 // recurrence_amount
    ==
    assert
    
    // TODO: If a recurrence is missed for fill, give extra time.
    // Timestamp should be in the bounds of [recurrence_timestamp - INTERVAL_TOLERANCE, recurrence_timestamp + INTERVAL_TOLERANCE].
    // tl:507: int recurrence_timestamp = order.start_timestamp + (order.interval * (order.filled_recurrence + 1)) [slot 80]
    load 77; pushint 72; pushint 8; box_extract; btoi// order.start_timestamp
    load 77; pushint 56; pushint 8; box_extract; btoi// order.interval
    load 77; pushint 48; pushint 8; box_extract; btoi// order.filled_recurrence
    pushint 1
    +
    *
    +
    store 80                                                // recurrence_timestamp
    // tl:508: assert(((recurrence_timestamp - INTERVAL_TOLERANCE) <= Global.LatestTimestamp) && (Global.LatestTimestamp <= (recurrence_timestamp + INTERVAL_TOLERANCE)))
    load 80                                                 // recurrence_timestamp
    pushint INTERVAL_TOLERANCE                              // 30
    -
    global LatestTimestamp
    <=
    global LatestTimestamp
    load 80                                                 // recurrence_timestamp
    pushint INTERVAL_TOLERANCE                              // 30
    +
    <=
    &&
    assert
    
    // tl:510: assert(Global.LatestTimestamp <= order.expiration_timestamp)
    global LatestTimestamp
    load 77; pushint 88; pushint 8; box_extract; btoi// order.expiration_timestamp
    <=
    assert
    
    // tl:512: int end_execute_order_txn_index = Txn.GroupIndex + index_diff [slot 81]
    txn GroupIndex
    load 74                                                 // index_diff
    +
    store 81                                                // end_execute_order_txn_index
    // tl:513: check_execute_order_txn(end_execute_order_txn_index, "end_execute_recurring_order", order_id, fill_amount, index_diff)
    load 81                                                 // end_execute_order_txn_index
    pushbytes "end_execute_recurring_order"
    load 76                                                 // order_id
    load 75                                                 // fill_amount
    load 74                                                 // index_diff
    callsub __func__check_execute_order_txn
    
    // Transfer `fill_amount` to executor.
    // tl:516: transfer(order.asset_id, fill_amount, Global.CurrentApplicationAddress, Txn.Sender)
    load 77; pushint 0; pushint 8; box_extract; btoi// order.asset_id
    load 75                                                 // fill_amount
    global CurrentApplicationAddress
    txn Sender
    callsub __func__transfer
    
    // Logs
    // tl:519: log(ARC28Event("start_execute_recurring_order(address,uint64,address)", app_global_get(USER_ADDRESS_KEY), itob(order_id), Txn.Sender))
    pushbytes 0xddf94f80                                    // SHA512_256("start_execute_recurring_order(address,uint64,address)")[:4]
    pushbytes USER_ADDRESS_KEY                              // "user_address"
    app_global_get
    load 76                                                 // order_id
    itob
    txn Sender
    concat
    concat
    concat
    log
    
    // tl:521: return
    retsub


// Description: Method checks the validity of the execution between `start_execute_recurring_order` and `end_execute_recurring_order`.
// An executor must return the correct amount of `target_asset_id` via an axfer at `Txn.GroupIndex - 1`. Otherwise the transaction group fails.
// Permission: Everyone
// tl:529: func end_execute_recurring_order(order_id: int, fill_amount: int, index_diff: int):
__func__end_execute_recurring_order:
    store 82                                                // index_diff [int]
    store 83                                                // fill_amount [int]
    store 84                                                // order_id [int]
    // tl:530: bytes user_address = app_global_get(USER_ADDRESS_KEY) [slot 85]
    pushbytes USER_ADDRESS_KEY                              // "user_address"
    app_global_get
    store 85                                                // user_address
    // tl:531: box<RecurringOrder> order = OpenBox(Concat("r", itob(order_id))) [slot 86]
    pushbytes "r"
    load 84                                                 // order_id
    itob
    concat
    dup; box_len; assert; pushint 96; ==; assert            // len(box) == RecurringOrder.size
    store 86                                                // box:order
    
    // tl:533: int start_execute_order_txn_index = Txn.GroupIndex - index_diff [slot 87]
    txn GroupIndex
    load 82                                                 // index_diff
    -
    store 87                                                // start_execute_order_txn_index
    // tl:534: check_execute_order_txn(start_execute_order_txn_index, "start_execute_recurring_order", order_id, fill_amount, index_diff)
    load 87                                                 // start_execute_order_txn_index
    pushbytes "start_execute_recurring_order"
    load 84                                                 // order_id
    load 83                                                 // fill_amount
    load 82                                                 // index_diff
    callsub __func__check_execute_order_txn
    
    // Assert that user received the target asset.
    // tl:537: int received_amount = check_received_target_asset(Txn.GroupIndex - 1, Global.CurrentApplicationAddress, order.target_asset_id, 0) [slot 88]
    txn GroupIndex
    pushint 1
    -
    global CurrentApplicationAddress
    load 86; pushint 16; pushint 8; box_extract; btoi// order.target_asset_id
    pushint 0
    callsub __func__check_received_target_asset
    store 88                                                // received_amount
    
    // tl:539: order.filled_amount = order.filled_amount + fill_amount
    load 86; pushint 24; pushint 8; box_extract; btoi// order.filled_amount
    load 83                                                 // fill_amount
    +
    itob
    load 86
    pushint 24
    uncover 2
    box_replace
    // boxset order.filled_amount
    // tl:540: order.filled_recurrence = order.filled_recurrence + 1
    load 86; pushint 48; pushint 8; box_extract; btoi// order.filled_recurrence
    pushint 1
    +
    itob
    load 86
    pushint 48
    uncover 2
    box_replace
    // boxset order.filled_recurrence
    // tl:541: order.collected_target_amount = order.collected_target_amount + received_amount
    load 86; pushint 32; pushint 8; box_extract; btoi// order.collected_target_amount
    load 88                                                 // received_amount
    +
    itob
    load 86
    pushint 32
    uncover 2
    box_replace
    // boxset order.collected_target_amount
    
    // Logs
    // tl:544: bytes order_data [slot 89]
    // tl:545: _, order_data = box_get(order)
    load 86                                                 // order
    box_get
    pop                                                     // discarding value for _
    store 89                                                // order_data
    // tl:546: log(ARC28Event("recurring_order(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)", user_address, itob(order_id), order_data))
    pushbytes 0x5e044159                                    // SHA512_256("recurring_order(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)")[:4]
    load 85                                                 // user_address
    load 84                                                 // order_id
    itob
    load 89                                                 // order_data
    concat
    concat
    concat
    log
    // tl:547: log(ARC28Event("end_execute_recurring_order(address,uint64,address,uint64,uint64)", user_address, itob(order_id), Txn.Sender, itob(fill_amount), itob(received_amount)))
    pushbytes 0xc9f6f955                                    // SHA512_256("end_execute_recurring_order(address,uint64,address,uint64,uint64)")[:4]
    load 85                                                 // user_address
    load 84                                                 // order_id
    itob
    txn Sender
    load 83                                                 // fill_amount
    itob
    load 88                                                 // received_amount
    itob
    concat
    concat
    concat
    concat
    concat
    log
    
    // If all amount is filled, send the collected_target_amount to user, send the fee_amount to registry app, delete the order.
    // If partial filling is not allowed `collected_target_amount` >= `target_amount` == `received_amount`.
    // If partial filling is allowed, and user has collected partial fills beforehand, `collected_target_amount` < `target_amount`.
    // tl:552: if order.target_recurrence == order.filled_recurrence:
    load 86; pushint 40; pushint 8; box_extract; btoi// order.target_recurrence
    load 86; pushint 48; pushint 8; box_extract; btoi// order.filled_recurrence
    ==
    bz l10_end
    // then:
        // tl:553: int fee_amount = calculate_fee_amount(order.collected_target_amount, order.fee_rate) [slot 90]
        load 86; pushint 32; pushint 8; box_extract; btoi// order.collected_target_amount
        load 86; pushint 64; pushint 8; box_extract; btoi// order.fee_rate
        callsub __func__calculate_fee_amount
        store 90                                            // fee_amount
        
        // tl:555: transfer(order.target_asset_id, (order.collected_target_amount - fee_amount), Global.CurrentApplicationAddress, user_address)
        load 86; pushint 16; pushint 8; box_extract; btoi// order.target_asset_id
        load 86; pushint 32; pushint 8; box_extract; btoi// order.collected_target_amount
        load 90                                             // fee_amount
        -
        global CurrentApplicationAddress
        load 85                                             // user_address
        callsub __func__transfer
        // tl:556: transfer(order.target_asset_id, fee_amount, Global.CurrentApplicationAddress, app_global_get(REGISTRY_APP_ACCOUNT_ADDRESS_KEY))
        load 86; pushint 16; pushint 8; box_extract; btoi// order.target_asset_id
        load 90                                             // fee_amount
        global CurrentApplicationAddress
        pushbytes REGISTRY_APP_ACCOUNT_ADDRESS_KEY          // "registry_app_account_address"
        app_global_get
        callsub __func__transfer
        // tl:557: _ = box_del(order)
        load 86                                             // order
        box_del
        pop                                                 // discarding value for _
    l10_end:
    
    // tl:560: return
    retsub


// tl:564: func check_is_endorsed(user_address: bytes[32]):
__func__check_is_endorsed:
    store 91                                                // user_address [bytes[32]]
    // tl:565: int exists [slot 92]
    // tl:566: bytes is_endorsed_bytes [slot 93]
    // tl:567: int is_endorsed [slot 94]
    
    // tl:569: exists, is_endorsed_bytes = app_local_get_ex(user_address, app_global_get(REGISTRY_APP_ID_KEY), IS_ENDORSED_KEY)
    load 91                                                 // user_address
    pushbytes REGISTRY_APP_ID_KEY                           // "registry_app_id"
    app_global_get
    pushbytes IS_ENDORSED_KEY                               // "is_endorsed"
    app_local_get_ex
    store 92                                                // exists
    store 93                                                // is_endorsed_bytes
    
    // tl:571: assert(exists)
    load 92                                                 // exists
    assert
    
    // tl:573: is_endorsed = UncheckedCast(is_endorsed_bytes, int)
    load 93                                                 // is_endorsed_bytes
    store 94                                                // is_endorsed
    // tl:574: assert(is_endorsed)
    load 94                                                 // is_endorsed
    assert
    
    // tl:576: return
    retsub


// tl:580: func calculate_minimum_amount(amount: int, target_amount: int, fill_amount: int) int:
__func__calculate_minimum_amount:
    store 95                                                // fill_amount [int]
    store 96                                                // target_amount [int]
    store 97                                                // amount [int]
    // tl:581: bytes target_rate = (itob(target_amount) b* itob(RATE_SCALER)) b/ itob(amount) [slot 98]
    load 96                                                 // target_amount
    itob
    pushint RATE_SCALER                                     // 18446744073709551615
    itob
    b*
    load 97                                                 // amount
    itob
    b/
    store 98                                                // target_rate
    // tl:582: int minimum_amount = btoi((itob(fill_amount) b* target_rate) b/ itob(RATE_SCALER)) [slot 99]
    load 95                                                 // fill_amount
    itob
    load 98                                                 // target_rate
    b*
    pushint RATE_SCALER                                     // 18446744073709551615
    itob
    b/
    btoi
    store 99                                                // minimum_amount
    // tl:583: return minimum_amount
    load 99                                                 // minimum_amount
    retsub


// tl:587: func calculate_fee_amount(target_amount: int, fee_rate: int) int:
__func__calculate_fee_amount:
    store 100                                               // fee_rate [int]
    store 101                                               // target_amount [int]
    // tl:588: int fee_amount = (target_amount * fee_rate) / 10000 [slot 102]
    load 101                                                // target_amount
    load 100                                                // fee_rate
    *
    pushint 10000
    /
    store 102                                               // fee_amount
    // tl:589: return fee_amount
    load 102                                                // fee_amount
    retsub


// tl:593: func get_fee_rate() int:
__func__get_fee_rate:
    // tl:594: bytes threshold_bytes [slot 103]
    // tl:595: bytes fee_rate_bytes [slot 104]
    // tl:596: int fee_rate [slot 105]
    
    // tl:598: int account_voting_power = get_account_voting_power(UncheckedCast(app_global_get(USER_ADDRESS_KEY), bytes)) [slot 106]
    pushbytes USER_ADDRESS_KEY                              // "user_address"
    app_global_get
    callsub __func__get_account_voting_power
    store 106                                               // account_voting_power
    // tl:599: _, threshold_bytes = app_global_get_ex(app_global_get(REGISTRY_APP_ID_KEY), GOVERNOR_FEE_RATE_POWER_THRESHOLD)
    pushbytes REGISTRY_APP_ID_KEY                           // "registry_app_id"
    app_global_get
    pushbytes GOVERNOR_FEE_RATE_POWER_THRESHOLD             // "governor_fee_rate_power_threshold"
    app_global_get_ex
    pop                                                     // discarding value for _
    store 103                                               // threshold_bytes
    // tl:600: int fee_rate_power_threshold = UncheckedCast(threshold_bytes, int) [slot 107]
    load 103                                                // threshold_bytes
    store 107                                               // fee_rate_power_threshold
    
    // tl:602: if account_voting_power > fee_rate_power_threshold:
    load 106                                                // account_voting_power
    load 107                                                // fee_rate_power_threshold
    >
    bz l11_else
    // then:
        // tl:603: _, fee_rate_bytes = app_global_get_ex(app_global_get(REGISTRY_APP_ID_KEY), GOVERNOR_ORDER_FEE_RATE_KEY)
        pushbytes REGISTRY_APP_ID_KEY                       // "registry_app_id"
        app_global_get
        pushbytes GOVERNOR_ORDER_FEE_RATE_KEY               // "governor_order_fee_rate"
        app_global_get_ex
        pop                                                 // discarding value for _
        store 104                                           // fee_rate_bytes
        b l11_end
    l11_else:
    // tl:604: else:
        // tl:605: _, fee_rate_bytes = app_global_get_ex(app_global_get(REGISTRY_APP_ID_KEY), ORDER_FEE_RATE_KEY)
        pushbytes REGISTRY_APP_ID_KEY                       // "registry_app_id"
        app_global_get
        pushbytes ORDER_FEE_RATE_KEY                        // "order_fee_rate"
        app_global_get_ex
        pop                                                 // discarding value for _
        store 104                                           // fee_rate_bytes
    l11_end:
    
    // tl:608: fee_rate = UncheckedCast(fee_rate_bytes, int)
    load 104                                                // fee_rate_bytes
    store 105                                               // fee_rate
    // tl:609: return fee_rate
    load 105                                                // fee_rate
    retsub


// tl:613: func get_account_voting_power(address: bytes) int:
__func__get_account_voting_power:
    store 108                                               // address [bytes]
    // tl:614: inner_txn:
    itxn_begin
        // tl:615: TypeEnum: Appl
        pushint 6                                           // Appl
        itxn_field TypeEnum
        // tl:616: ApplicationID: app_global_get(VAULT_APP_ID_KEY)
        pushbytes VAULT_APP_ID_KEY                          // "vault_app_id"
        app_global_get
        itxn_field ApplicationID
        // tl:617: ApplicationArgs[0]: "get_tiny_power_of"
        pushbytes "get_tiny_power_of"
        itxn_field ApplicationArgs
        // tl:618: ApplicationArgs[1]: address
        load 108                                            // address
        itxn_field ApplicationArgs
        // tl:619: Fee: 0
        pushint 0
        itxn_field Fee
    itxn_submit
    // end inner_txn
    // tl:621: int voting_power = extract_uint64(Itxn.LastLog, 4) [slot 109]
    itxn LastLog
    pushint 4
    extract_uint64
    store 109                                               // voting_power
    // tl:622: return voting_power
    load 109                                                // voting_power
    retsub


// tl:626: func opt_in_to_asset_if_needed(asset_id: int):
__func__opt_in_to_asset_if_needed:
    store 110                                               // asset_id [int]
    // tl:627: if asset_id:
    load 110                                                // asset_id
    bz l12_end
    // then:
        // tl:628: int is_opted_in [slot 111]
        // tl:629: is_opted_in, _ = asset_holding_get(AssetBalance, Global.CurrentApplicationAddress, asset_id)
        global CurrentApplicationAddress
        load 110                                            // asset_id
        asset_holding_get AssetBalance
        store 111                                           // is_opted_in
        pop                                                 // discarding value for _
        
        // tl:631: if is_opted_in == 0:
        load 111                                            // is_opted_in
        pushint 0
        ==
        bz l13_end
        // then:
            // tl:632: transfer(asset_id, 0, Global.CurrentApplicationAddress, Global.CurrentApplicationAddress)
            load 110                                        // asset_id
            pushint 0
            global CurrentApplicationAddress
            global CurrentApplicationAddress
            callsub __func__transfer
        l13_end:
    l12_end:
    // tl:635: return
    retsub


// tl:639: func check_received_asset(txn_index: int, receiver: bytes, asset_id: int, amount: int):
__func__check_received_asset:
    store 112                                               // amount [int]
    store 113                                               // asset_id [int]
    store 114                                               // receiver [bytes]
    store 115                                               // txn_index [int]
    // tl:640: if !asset_id:
    load 113                                                // asset_id
    !
    bz l14_else
    // then:
        // tl:641: assert(Gtxn[txn_index].TypeEnum == Pay)
        load 115                                            // txn_index
        gtxns TypeEnum
        pushint 1                                           // Pay
        ==
        assert
        // tl:642: assert(Gtxn[txn_index].Receiver == receiver)
        load 115                                            // txn_index
        gtxns Receiver
        load 114                                            // receiver
        ==
        assert
        // tl:643: assert(Gtxn[txn_index].Amount == amount)
        load 115                                            // txn_index
        gtxns Amount
        load 112                                            // amount
        ==
        assert
        b l14_end
    l14_else:
    // tl:644: else:
        // tl:645: assert(Gtxn[txn_index].TypeEnum == Axfer)
        load 115                                            // txn_index
        gtxns TypeEnum
        pushint 4                                           // Axfer
        ==
        assert
        // tl:646: assert(Gtxn[txn_index].AssetReceiver == receiver)
        load 115                                            // txn_index
        gtxns AssetReceiver
        load 114                                            // receiver
        ==
        assert
        // tl:647: assert(Gtxn[txn_index].XferAsset == asset_id)
        load 115                                            // txn_index
        gtxns XferAsset
        load 113                                            // asset_id
        ==
        assert
        // tl:648: assert(Gtxn[txn_index].AssetAmount == amount)
        load 115                                            // txn_index
        gtxns AssetAmount
        load 112                                            // amount
        ==
        assert
    l14_end:
    // tl:650: return
    retsub


// tl:654: func check_received_target_asset(txn_index: int, receiver: bytes, asset_id: int, minimum_amount: int) int:
__func__check_received_target_asset:
    store 116                                               // minimum_amount [int]
    store 117                                               // asset_id [int]
    store 118                                               // receiver [bytes]
    store 119                                               // txn_index [int]
    // tl:655: int received_amount [slot 120]
    // tl:656: if !asset_id:
    load 117                                                // asset_id
    !
    bz l15_else
    // then:
        // tl:657: assert(Gtxn[txn_index].TypeEnum == Pay)
        load 119                                            // txn_index
        gtxns TypeEnum
        pushint 1                                           // Pay
        ==
        assert
        // tl:658: assert(Gtxn[txn_index].Receiver == receiver)
        load 119                                            // txn_index
        gtxns Receiver
        load 118                                            // receiver
        ==
        assert
        // tl:659: assert(Gtxn[txn_index].Amount >= minimum_amount)
        load 119                                            // txn_index
        gtxns Amount
        load 116                                            // minimum_amount
        >=
        assert
        
        // tl:661: received_amount = Gtxn[txn_index].Amount
        load 119                                            // txn_index
        gtxns Amount
        store 120                                           // received_amount
        b l15_end
    l15_else:
    // tl:662: else:
        // tl:663: assert(Gtxn[txn_index].TypeEnum == Axfer)
        load 119                                            // txn_index
        gtxns TypeEnum
        pushint 4                                           // Axfer
        ==
        assert
        // tl:664: assert(Gtxn[txn_index].AssetReceiver == receiver)
        load 119                                            // txn_index
        gtxns AssetReceiver
        load 118                                            // receiver
        ==
        assert
        // tl:665: assert(Gtxn[txn_index].XferAsset == asset_id)
        load 119                                            // txn_index
        gtxns XferAsset
        load 117                                            // asset_id
        ==
        assert
        // tl:666: assert(Gtxn[txn_index].AssetAmount >= minimum_amount)
        load 119                                            // txn_index
        gtxns AssetAmount
        load 116                                            // minimum_amount
        >=
        assert
        
        // tl:668: received_amount = Gtxn[txn_index].AssetAmount
        load 119                                            // txn_index
        gtxns AssetAmount
        store 120                                           // received_amount
    l15_end:
    
    // tl:671: return received_amount
    load 120                                                // received_amount
    retsub


// tl:675: func transfer(asset_id: int, amount: int, sender: bytes, receiver: bytes):
__func__transfer:
    store 121                                               // receiver [bytes]
    store 122                                               // sender [bytes]
    store 123                                               // amount [int]
    store 124                                               // asset_id [int]
    // tl:676: if !asset_id:
    load 124                                                // asset_id
    !
    bz l16_else
    // then:
        // tl:677: inner_txn:
        itxn_begin
            // tl:678: TypeEnum: Pay
            pushint 1                                       // Pay
            itxn_field TypeEnum
            // tl:679: Sender: sender
            load 122                                        // sender
            itxn_field Sender
            // tl:680: Receiver: receiver
            load 121                                        // receiver
            itxn_field Receiver
            // tl:681: Amount: amount
            load 123                                        // amount
            itxn_field Amount
            // tl:682: Fee: 0
            pushint 0
            itxn_field Fee
        itxn_submit
        // end inner_txn
        b l16_end
    l16_else:
    // tl:684: else:
        // tl:685: inner_txn:
        itxn_begin
            // tl:686: TypeEnum: Axfer
            pushint 4                                       // Axfer
            itxn_field TypeEnum
            // tl:687: Sender: sender
            load 122                                        // sender
            itxn_field Sender
            // tl:688: AssetReceiver: receiver
            load 121                                        // receiver
            itxn_field AssetReceiver
            // tl:689: AssetAmount: amount
            load 123                                        // amount
            itxn_field AssetAmount
            // tl:690: XferAsset: asset_id
            load 124                                        // asset_id
            itxn_field XferAsset
            // tl:691: Fee: 0
            pushint 0
            itxn_field Fee
        itxn_submit
        // end inner_txn
    l16_end:
    // tl:694: return
    retsub


